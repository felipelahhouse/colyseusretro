# ========================================
# Backup para GitHub - PlayNow Emulator
# ========================================
# Data: 18 de Outubro de 2025
# ========================================

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "Backup do Projeto para GitHub" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# 1. Verificar se Git est√° instalado
Write-Host "1Ô∏è‚É£ Verificando Git..." -ForegroundColor Yellow
$gitVersion = git --version 2>&1
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Git n√£o est√° instalado!" -ForegroundColor Red
    Write-Host "üì• Baixe e instale: https://git-scm.com/download/win" -ForegroundColor Yellow
    exit 1
}
Write-Host "‚úÖ Git instalado: $gitVersion" -ForegroundColor Green
Write-Host ""

# 2. Verificar se j√° √© um reposit√≥rio Git
Write-Host "2Ô∏è‚É£ Verificando reposit√≥rio Git..." -ForegroundColor Yellow
if (Test-Path ".git") {
    Write-Host "‚úÖ Reposit√≥rio Git j√° existe" -ForegroundColor Green
    
    # Verificar se h√° remote configurado
    $remoteUrl = git remote get-url origin 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "üì° Remote atual: $remoteUrl" -ForegroundColor Cyan
        Write-Host ""
        $continuar = Read-Host "Deseja fazer push neste reposit√≥rio? (S/N)"
        if ($continuar -ne "S" -and $continuar -ne "s") {
            Write-Host "‚ùå Opera√ß√£o cancelada" -ForegroundColor Red
            exit 0
        }
    }
} else {
    Write-Host "üì¶ Inicializando reposit√≥rio Git..." -ForegroundColor Yellow
    git init
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Reposit√≥rio inicializado" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro ao inicializar reposit√≥rio" -ForegroundColor Red
        exit 1
    }
}
Write-Host ""

# 3. Criar/Atualizar .gitignore
Write-Host "3Ô∏è‚É£ Configurando .gitignore..." -ForegroundColor Yellow
$gitignoreContent = @"
# Dependencies
node_modules/
.pnp
.pnp.js

# Testing
coverage/

# Production
build/
dist/

# Environment Variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
logs/
*.log

# OS Files
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Firebase
.firebase/
firebase-debug.log
firestore-debug.log

# Python
__pycache__/
*.py[cod]
*$py.class
.Python
.venv/
venv/
ENV/

# Misc
.cache/
.temp/
temp/
tmp/
"@

Set-Content -Path ".gitignore" -Value $gitignoreContent -Encoding UTF8
Write-Host "‚úÖ .gitignore configurado" -ForegroundColor Green
Write-Host ""

# 4. Configurar usu√°rio Git (se necess√°rio)
Write-Host "4Ô∏è‚É£ Configurando usu√°rio Git..." -ForegroundColor Yellow
$gitUser = git config user.name 2>&1
$gitEmail = git config user.email 2>&1

if ([string]::IsNullOrWhiteSpace($gitUser)) {
    Write-Host "üìù Configure seu nome:" -ForegroundColor Cyan
    $nome = Read-Host "Nome"
    git config user.name "$nome"
}

if ([string]::IsNullOrWhiteSpace($gitEmail)) {
    Write-Host "üìß Configure seu email:" -ForegroundColor Cyan
    $email = Read-Host "Email"
    git config user.email "$email"
}

$gitUser = git config user.name
$gitEmail = git config user.email
Write-Host "‚úÖ Usu√°rio: $gitUser <$gitEmail>" -ForegroundColor Green
Write-Host ""

# 5. Adicionar todos os arquivos
Write-Host "5Ô∏è‚É£ Adicionando arquivos ao Git..." -ForegroundColor Yellow
git add .
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Arquivos adicionados" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro ao adicionar arquivos" -ForegroundColor Red
    exit 1
}
Write-Host ""

# 6. Criar commit
Write-Host "6Ô∏è‚É£ Criando commit..." -ForegroundColor Yellow
$commitMsg = "üöÄ Backup completo do projeto PlayNow Emulator - $(Get-Date -Format 'dd/MM/yyyy HH:mm')"
git commit -m "$commitMsg"
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Commit criado: $commitMsg" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Nenhuma mudan√ßa para commitar ou erro no commit" -ForegroundColor Yellow
}
Write-Host ""

# 7. Configurar reposit√≥rio remoto
Write-Host "7Ô∏è‚É£ Configurando reposit√≥rio GitHub..." -ForegroundColor Yellow
$remoteUrl = git remote get-url origin 2>&1

if ($LASTEXITCODE -ne 0) {
    Write-Host "üì° Nenhum reposit√≥rio remoto configurado" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üîó Op√ß√µes:" -ForegroundColor Yellow
    Write-Host "1. Criar novo reposit√≥rio em: https://github.com/new" -ForegroundColor White
    Write-Host "2. Copie a URL HTTPS do reposit√≥rio (ex: https://github.com/usuario/repo.git)" -ForegroundColor White
    Write-Host ""
    $repoUrl = Read-Host "Cole a URL do reposit√≥rio GitHub"
    
    if ([string]::IsNullOrWhiteSpace($repoUrl)) {
        Write-Host "‚ùå URL inv√°lida" -ForegroundColor Red
        exit 1
    }
    
    git remote add origin $repoUrl
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Reposit√≥rio remoto configurado: $repoUrl" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro ao configurar reposit√≥rio remoto" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ Reposit√≥rio remoto j√° configurado: $remoteUrl" -ForegroundColor Green
}
Write-Host ""

# 8. Fazer push para GitHub
Write-Host "8Ô∏è‚É£ Enviando para GitHub..." -ForegroundColor Yellow
Write-Host "üì§ Fazendo push..." -ForegroundColor Cyan

# Tentar push na branch atual
$currentBranch = git branch --show-current

if ([string]::IsNullOrWhiteSpace($currentBranch)) {
    # Se n√£o h√° branch, criar main
    git branch -M main
    $currentBranch = "main"
}

Write-Host "üåø Branch: $currentBranch" -ForegroundColor Cyan

# Push com for√ßa na primeira vez (caso seja um reposit√≥rio novo)
git push -u origin $currentBranch --force 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Push realizado com sucesso!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Tentando push normal..." -ForegroundColor Yellow
    git push -u origin $currentBranch 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Push realizado com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erro ao fazer push" -ForegroundColor Red
        Write-Host ""
        Write-Host "üí° Poss√≠veis solu√ß√µes:" -ForegroundColor Yellow
        Write-Host "1. Verifique suas credenciais do GitHub" -ForegroundColor White
        Write-Host "2. Verifique se tem permiss√£o no reposit√≥rio" -ForegroundColor White
        Write-Host "3. Configure um Personal Access Token:" -ForegroundColor White
        Write-Host "   https://github.com/settings/tokens" -ForegroundColor Cyan
        exit 1
    }
}
Write-Host ""

# 9. Sucesso!
Write-Host "========================================" -ForegroundColor Green
Write-Host "‚úÖ BACKUP CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìä Resumo:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Reposit√≥rio: $remoteUrl" -ForegroundColor White
Write-Host "   ‚Ä¢ Branch: $currentBranch" -ForegroundColor White
Write-Host "   ‚Ä¢ Commit: $commitMsg" -ForegroundColor White
Write-Host ""
Write-Host "üåê Acesse seu reposit√≥rio em:" -ForegroundColor Yellow
$repoWebUrl = $remoteUrl -replace '\.git$', '' -replace 'git@github.com:', 'https://github.com/'
Write-Host "   $repoWebUrl" -ForegroundColor Cyan
Write-Host ""
Write-Host "üí° Para fazer backups futuros, execute:" -ForegroundColor Yellow
Write-Host "   .\backup-github.ps1" -ForegroundColor Cyan
Write-Host ""
